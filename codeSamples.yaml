overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: hello
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hello(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingAccounts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Accounts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/accounts"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Accounts.Create(ctx, "<value>", components.UnifiedAccountingAccountInput{
                    Name: gosdk.String("Cash"),
                    Description: gosdk.String("Main cash account for daily operations"),
                    Classification: gosdk.String("Asset"),
                    Type: gosdk.String("Current Asset"),
                    Status: gosdk.String("Active"),
                    CurrentBalance: gosdk.Float64(10000),
                    Currency: gosdk.String("USD"),
                    AccountNumber: gosdk.String("1000"),
                    ParentAccount: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: &components.UnifiedAccountingAccountInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAccountOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Accounts.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAccountOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/addresses"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingAddress
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Addresses.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/addresses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingAddress
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Addresses.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAddressOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingAttachments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Attachments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Attachments.Create(ctx, "<value>", components.UnifiedAccountingAttachmentInput{
                    FileName: gosdk.String("invoice.pdf"),
                    FileURL: gosdk.String("https://example.com/files/invoice.pdf"),
                    AccountID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: &components.UnifiedAccountingAttachmentInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Attachments.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/balancesheets"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingBalanceSheets
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Balancesheets.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/balancesheets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingBalanceSheet
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Balancesheets.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingBalancesheetOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/cashflowstatements"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingCashflowStatement
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Cashflowstatements.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/cashflowstatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingCashflowStatement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Cashflowstatements.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCashflowstatementOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/companyinfos"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingCompanyInfos
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Companyinfos.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/companyinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingCompanyInfo
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Companyinfos.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCompanyinfoOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Contacts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Contacts.Create(ctx, "<value>", components.UnifiedAccountingContactInput{
                    Name: gosdk.String("John Doe"),
                    IsSupplier: gosdk.Bool(true),
                    IsCustomer: gosdk.Bool(false),
                    EmailAddress: gosdk.String("john.doe@example.com"),
                    TaxNumber: gosdk.String("123456789"),
                    Status: gosdk.String("Active"),
                    Currency: gosdk.String("USD"),
                    RemoteUpdatedAt: gosdk.String("2024-06-15T12:00:00Z"),
                    CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: &components.UnifiedAccountingContactInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Contacts.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/creditnotes"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingCreditNote
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Creditnotes.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/creditnotes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingCreditNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Creditnotes.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCreditnoteOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/expenses"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingExpense
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Expenses.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/expenses"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingExpense
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Expenses.Create(ctx, "<value>", components.UnifiedAccountingExpenseInput{
                    TransactionDate: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                    TotalAmount: gosdk.Float64(10000),
                    SubTotal: gosdk.Float64(9000),
                    TotalTaxAmount: gosdk.Float64(1000),
                    Currency: gosdk.String("USD"),
                    ExchangeRate: gosdk.String("1.2"),
                    Memo: gosdk.String("Business lunch with client"),
                    AccountID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TrackingCategories: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    LineItems: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("report_item_1234"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedAccountingExpenseInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingExpenseOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/expenses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingExpense
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Expenses.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingExpenseOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/incomestatements"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingIncomeStatement
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Incomestatements.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/incomestatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingIncomeStatement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Incomestatements.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingIncomestatementOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/invoices"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingInvoice
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Invoices.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/invoices"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingInvoice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Invoices.Create(ctx, "<value>", components.UnifiedAccountingInvoiceInput{
                    Type: gosdk.String("Sales"),
                    Number: gosdk.String("INV-001"),
                    IssueDate: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                    DueDate: types.MustNewTimeFromString("2024-07-15T12:00:00Z"),
                    PaidOnDate: types.MustNewTimeFromString("2024-07-10T12:00:00Z"),
                    Memo: gosdk.String("Payment for services rendered"),
                    Currency: gosdk.String("USD"),
                    ExchangeRate: gosdk.String("1.2"),
                    TotalDiscount: gosdk.Float64(1000),
                    SubTotal: gosdk.Float64(10000),
                    Status: gosdk.String("Paid"),
                    TotalTaxAmount: gosdk.Float64(1000),
                    TotalAmount: gosdk.Float64(11000),
                    Balance: gosdk.Float64(0),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    AccountingPeriodID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TrackingCategories: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    LineItems: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("report_item_1234"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedAccountingInvoiceInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingInvoiceOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/invoices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingInvoice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Invoices.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingInvoiceOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/items"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingItem
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Items.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/items/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingItem
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Items.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingItemOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/journalentries"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingJournalEntry
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Journalentries.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/journalentries"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingJournalEntry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Journalentries.Create(ctx, "<value>", components.UnifiedAccountingJournalentryInput{
                    TransactionDate: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                    Payments: []string{
                        "payment1",
                        "payment2",
                    },
                    AppliedPayments: []string{
                        "appliedPayment1",
                        "appliedPayment2",
                    },
                    Memo: gosdk.String("Monthly expense journal entry"),
                    Currency: gosdk.String("USD"),
                    ExchangeRate: gosdk.String("1.2"),
                    IDAccCompanyInfo: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    JournalNumber: gosdk.String("JE-001"),
                    TrackingCategories: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    IDAccAccountingPeriod: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    PostingStatus: gosdk.String("Posted"),
                    LineItems: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("report_item_1234"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedAccountingJournalentryInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingJournalentryOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/journalentries/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingJournalEntry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Journalentries.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingJournalentryOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/payments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingPayment
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Payments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/payments"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingPayment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Payments.Create(ctx, "<value>", components.UnifiedAccountingPaymentInput{
                    InvoiceID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TransactionDate: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    AccountID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Currency: gosdk.String("USD"),
                    ExchangeRate: gosdk.String("1.2"),
                    TotalAmount: gosdk.Float64(10000),
                    Type: gosdk.String("Credit Card"),
                    CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    AccountingPeriodID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TrackingCategories: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    LineItems: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("report_item_1234"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedAccountingPaymentInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPaymentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/payments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingPayment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Payments.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPaymentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/phonenumbers"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingPhonenumber
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Phonenumbers.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/phonenumbers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingPhonenumber
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Phonenumbers.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPhonenumberOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/purchaseorders"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingPurchaseOrder
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Purchaseorders.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/purchaseorders"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingPurchaseOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.Create(ctx, "<value>", components.UnifiedAccountingPurchaseorderInput{
                    Status: gosdk.String("Pending"),
                    IssueDate: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                    PurchaseOrderNumber: gosdk.String("PO-001"),
                    DeliveryDate: types.MustNewTimeFromString("2024-07-15T12:00:00Z"),
                    DeliveryAddress: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Customer: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Vendor: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Memo: gosdk.String("Purchase order for Q3 inventory"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TotalAmount: gosdk.Float64(100000),
                    Currency: gosdk.String("USD"),
                    ExchangeRate: gosdk.String("1.2"),
                    TrackingCategories: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    AccountingPeriodID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    LineItems: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("report_item_1234"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedAccountingPurchaseorderInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPurchaseorderOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/purchaseorders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingPurchaseOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPurchaseorderOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/taxrates"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingTaxRate
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Taxrates.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/taxrates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingTaxRate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Taxrates.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTaxrateOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/trackingcategories"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingTrackingCategorys
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Trackingcategories.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/trackingcategories/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingTrackingCategory
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Trackingcategories.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTrackingcategoryOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/transactions"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingTransaction
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Transactions.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/transactions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingTransaction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Transactions.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTransactionOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/vendorcredits"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingVendorCredit
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Vendorcredits.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/accounting/vendorcredits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingVendorCredit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Vendorcredits.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingVendorcreditOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/activities"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsActivity
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Activities.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/activities"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAtsActivity
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Activities.Create(ctx, "<value>", components.UnifiedAtsActivityInput{
                    ActivityType: gosdk.String("NOTE"),
                    Subject: gosdk.String("Email subject"),
                    Body: gosdk.String("Dear Diana, I love you"),
                    Visibility: gosdk.String("PUBLIC"),
                    CandidateID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    RemoteCreatedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsActivityOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/activities/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsActivity
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Activities.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsActivityOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/applications"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsApplication
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Applications.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/applications"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAtsApplication
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Applications.Create(ctx, "<value>", components.UnifiedAtsApplicationInput{
                    AppliedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    RejectedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    Offers: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "12345678-1234-1234-1234-123456789012",
                    },
                    Source: gosdk.String("Source Name"),
                    CreditedTo: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CurrentStage: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    RejectReason: gosdk.String("Candidate not experienced enough"),
                    CandidateID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    JobID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsApplicationOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsApplication
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Applications.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsApplicationOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsAttachment
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Attachments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAtsAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Attachments.Create(ctx, "<value>", components.UnifiedAtsAttachmentInput{
                    FileURL: gosdk.String("https://example.com/file.pdf"),
                    FileName: gosdk.String("file.pdf"),
                    AttachmentType: gosdk.String("RESUME"),
                    RemoteCreatedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    RemoteModifiedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    CandidateID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Attachments.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsCandidate
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Candidates.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/candidates"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAtsCandidate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Candidates.Create(ctx, "<value>", components.UnifiedAtsCandidateInput{
                    FirstName: gosdk.String("Joe"),
                    LastName: gosdk.String("Doe"),
                    Company: gosdk.String("Acme"),
                    Title: gosdk.String("Analyst"),
                    Locations: gosdk.String("New York"),
                    IsPrivate: gosdk.Bool(false),
                    EmailReachable: gosdk.Bool(true),
                    RemoteCreatedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    RemoteModifiedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    LastInteractionAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    Attachments: []components.UnifiedAtsCandidateInputAttachments{
                        components.CreateUnifiedAtsCandidateInputAttachmentsStr(
                            "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                    Applications: []components.UnifiedAtsCandidateInputApplications{
                        components.CreateUnifiedAtsCandidateInputApplicationsStr(
                            "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                    Tags: []components.UnifiedAtsCandidateInputTags{
                        components.CreateUnifiedAtsCandidateInputTagsStr(
                            "tag_1",
                        ),
                        components.CreateUnifiedAtsCandidateInputTagsStr(
                            "tag_2",
                        ),
                    },
                    Urls: []components.URL{
                        components.URL{
                            URL: gosdk.String("mywebsite.com"),
                            URLType: gosdk.String("WEBSITE"),
                        },
                    },
                    PhoneNumbers: []components.Phone{
                        components.Phone{
                            PhoneNumber: gosdk.String("+33660688899"),
                            PhoneType: gosdk.String("WORK"),
                        },
                    },
                    EmailAddresses: []components.Email{
                        components.Email{
                            EmailAddress: gosdk.String("joedoe@gmail.com"),
                            EmailAddressType: gosdk.String("WORK"),
                        },
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsCandidateOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsCandidate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Candidates.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsCandidateOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/departments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsDepartments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Departments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsDepartment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Departments.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsDepartmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/eeocs"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsEeocs
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Eeocs.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/eeocs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsEeocs
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Eeocs.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsEeocsOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/interviews"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsInterview
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Interviews.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/interviews"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAtsInterview
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Interviews.Create(ctx, "<value>", components.UnifiedAtsInterviewInput{
                    Status: gosdk.String("SCHEDULED"),
                    ApplicationID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    JobInterviewStageID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    OrganizedBy: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Interviewers: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    Location: gosdk.String("San Francisco"),
                    StartAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    EndAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    RemoteCreatedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    RemoteUpdatedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsInterviewOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/interviews/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsInterview
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Interviews.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsInterviewOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/jobinterviewstages"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsJobInterviewStage
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Jobinterviewstages.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/jobinterviewstages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsJobInterviewStage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Jobinterviewstages.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsJobinterviewstageOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsJob
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Jobs.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsJob
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Jobs.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsJobOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/offers"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsOffer
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Offers.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/offers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsOffer
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Offers.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsOfferOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/offices"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsOffice
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Offices.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/offices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsOffice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Offices.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsOfficeOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/rejectreasons"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsRejectReasons
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Rejectreasons.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/rejectreasons/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsRejectReason
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Rejectreasons.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsRejectreasonOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/scorecards"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsScorecard
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Scorecards.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/scorecards/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsScorecard
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Scorecards.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsScorecardOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/tags"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsTags
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Tags.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsTag
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Tags.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsTagOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ats.Users.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ats/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ats.Users.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsUserOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/auth/login"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: signIn
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Auth.Login.SignIn(ctx, components.LoginDto{
                    Email: "Oda.Treutel97@hotmail.com",
                    PasswordHash: "<value>",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/connections"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveConnections
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Connections.Retrieve(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Connections != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/companies"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmCompany
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Companies.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/crm/companies"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Companies.Create(ctx, "<value>", components.UnifiedCrmCompanyInput{
                    Name: gosdk.String("Acme"),
                    Industry: gosdk.String("ACCOUNTING"),
                    NumberOfEmployees: gosdk.Float64(10),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    EmailAddresses: []components.Email{
                        components.Email{
                            EmailAddress: gosdk.String("acme@gmail.com"),
                            EmailAddressType: gosdk.String("WORK"),
                        },
                    },
                    Addresses: []components.Address{
                        components.Address{
                            Street1: gosdk.String("5th Avenue"),
                            Street2: gosdk.String("Street 2"),
                            City: gosdk.String("New York"),
                            State: gosdk.String("NY"),
                            PostalCode: gosdk.String("10001"),
                            Country: gosdk.String("USA"),
                            AddressType: gosdk.String("WORK"),
                            OwnerType: gosdk.String("<value>"),
                        },
                    },
                    PhoneNumbers: []components.Phone{
                        components.Phone{
                            PhoneNumber: gosdk.String("+33660606067"),
                            PhoneType: gosdk.String("WORK"),
                        },
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmCompanyOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Companies.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmCompanyOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Contacts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/crm/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Contacts.Create(ctx, "<value>", components.UnifiedCrmContactInput{
                    FirstName: gosdk.String("John"),
                    LastName: gosdk.String("Doe"),
                    EmailAddresses: []components.Email{
                        components.Email{
                            EmailAddress: gosdk.String("Jena.Nienow28@yahoo.com"),
                            EmailAddressType: gosdk.String("<value>"),
                        },
                    },
                    PhoneNumbers: []components.Phone{
                        components.Phone{
                            PhoneNumber: gosdk.String("1-809-839-8041"),
                            PhoneType: gosdk.String("<value>"),
                        },
                    },
                    Addresses: []components.Address{
                        components.Address{
                            Street1: gosdk.String("5th Avenue"),
                            Street2: gosdk.String("Street 2"),
                            City: gosdk.String("Anytown"),
                            State: gosdk.String("CA"),
                            PostalCode: gosdk.String("10001"),
                            Country: gosdk.String("USA"),
                            AddressType: gosdk.String("PERSONAL"),
                            OwnerType: gosdk.String("<value>"),
                        },
                    },
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Contacts.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/deals"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmDeals
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Deals.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/crm/deals"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmDeal
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Deals.Create(ctx, "<value>", components.UnifiedCrmDealInput{
                    Name: gosdk.String("Huge Contract with Acme"),
                    Description: gosdk.String("Contract with Sales Operations Team"),
                    Amount: gosdk.Float64(1000),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    StageID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmDealOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/deals/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmDeal
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Deals.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmDealOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/engagements"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmEngagements
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Engagements.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/crm/engagements"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmEngagement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Engagements.Create(ctx, "<value>", components.UnifiedCrmEngagementInput{
                    Content: gosdk.String("Meeting call with CTO"),
                    Direction: gosdk.String("INBOUND"),
                    Subject: gosdk.String("Technical features planning"),
                    StartAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    EndTime: types.MustNewTimeFromString("2024-10-01T22:00:00Z"),
                    Type: gosdk.String("MEETING"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Contacts: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmEngagementOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/engagements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmEngagement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Engagements.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmEngagementOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/notes"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmNote
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Notes.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/crm/notes"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Notes.Create(ctx, "<value>", components.UnifiedCrmNoteInput{
                    Content: gosdk.String("My notes taken during the meeting"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    DealID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmNoteOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/notes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Notes.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmNoteOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/stages"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmStages
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Stages.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/crm/stages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmStage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Stages.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmStageOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/tasks"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmTask
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Tasks.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/crm/tasks"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmTask
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Tasks.Create(ctx, "<value>", components.UnifiedCrmTaskInput{
                    Subject: gosdk.String("Answer customers"),
                    Content: gosdk.String("Prepare email campaign"),
                    Status: gosdk.String("PENDING"),
                    DueDate: gosdk.String("2024-10-01T12:00:00Z"),
                    FinishedDate: gosdk.String("2024-10-01T12:00:00Z"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    DealID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmTaskOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/tasks/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmTask
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Tasks.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmTaskOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Users.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/crm/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Users.Retrieve(ctx, "<value>", "b008e199-eda9-4629-bd41-a01b6195864a", gosdk.Bool(true))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmUserOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ecommerce/customers"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listEcommerceCustomers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ecommerce.Customers.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ecommerce/customers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveEcommerceCustomer
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Customers.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceCustomerOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ecommerce/fulfillments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listEcommerceFulfillments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ecommerce.Fulfillments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ecommerce/fulfillments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveEcommerceFulfillment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Fulfillments.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceFulfillmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ecommerce/orders"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listEcommerceOrders
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ecommerce.Orders.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ecommerce/orders"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createEcommerceOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Orders.Create(ctx, "<value>", components.UnifiedEcommerceOrderInput{
                    OrderStatus: gosdk.String("UNSHIPPED"),
                    OrderNumber: gosdk.String("19823838833"),
                    PaymentStatus: gosdk.String("SUCCESS"),
                    Currency: gosdk.String("AUD"),
                    TotalPrice: gosdk.Float64(300),
                    TotalDiscount: gosdk.Float64(10),
                    TotalShipping: gosdk.Float64(120),
                    TotalTax: gosdk.Float64(120),
                    FulfillmentStatus: gosdk.String("PENDING"),
                    CustomerID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Items: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("12345"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedEcommerceOrderInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceOrderOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ecommerce/orders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveEcommerceOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Orders.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceOrderOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ecommerce/products"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listEcommerceProducts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ecommerce.Products.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ecommerce/products"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createEcommerceProduct
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Products.Create(ctx, "<value>", components.UnifiedEcommerceProductInput{
                    ProductURL: gosdk.String("https://product_url/tee"),
                    ProductType: gosdk.String("teeshirt"),
                    ProductStatus: gosdk.String("ACTIVE"),
                    ImagesUrls: []string{
                        "https://myproduct/image",
                    },
                    Description: gosdk.String("best tee ever"),
                    Vendor: gosdk.String("vendor_extern"),
                    Variants: []components.Variant{
                        components.Variant{},
                    },
                    Tags: []string{
                        "tag_1",
                    },
                    FieldMappings: &components.UnifiedEcommerceProductInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceProductOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ecommerce/products/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveEcommerceProduct
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Products.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceProductOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/events"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getPanoraCoreEvents
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Events.GetPanoraCoreEvents(ctx, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.EventResponses != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/field_mappings"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: defineCustomField
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.DefineCustomField(ctx, components.CustomFieldCreateDto{
                    ObjectTypeOwner: components.CustomFieldCreateDtoObjectTypeOwnerCompany.ToPointer(),
                    Name: gosdk.String("my_favorite_dish"),
                    Description: gosdk.String("Favorite Dish"),
                    DataType: components.CustomFieldCreateDtoDataTypeString.ToPointer(),
                    SourceCustomFieldID: gosdk.String("id_1"),
                    SourceProvider: gosdk.String("hubspot"),
                    LinkedUserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.CustomFieldResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/field_mappings/attributes"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getFieldMappings
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.GetFieldMappings(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/field_mappings/define"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: definitions
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.Definitions(ctx, components.DefineTargetFieldDto{
                    ObjectTypeOwner: components.ObjectTypeOwnerCompany.ToPointer(),
                    Name: gosdk.String("fav_dish"),
                    Description: gosdk.String("My favorite dish"),
                    DataType: components.DataTypeString.ToPointer(),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.CustomFieldResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/field_mappings/entities"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getFieldMappingsEntities
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.GetFieldMappingsEntities(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/field_mappings/map"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: map
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.Map(ctx, components.MapFieldToProviderDto{
                    AttributeID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    SourceCustomFieldID: gosdk.String("id_1"),
                    SourceProvider: gosdk.String("hubspot"),
                    LinkedUserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.CustomFieldResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/field_mappings/values"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getFieldMappingValues
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.GetFieldMappingValues(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/files"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listFilestorageFile
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Filestorage.Files.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/filestorage/files"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createFilestorageFile
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Files.Create(ctx, "<value>", components.UnifiedFilestorageFileInput{
                    Name: gosdk.String("my_paris_photo.png"),
                    FileURL: gosdk.String("https://example.com/my_paris_photo.png"),
                    MimeType: gosdk.String("application/pdf"),
                    Size: gosdk.String("1024"),
                    FolderID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Permission: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    SharedLink: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFileOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/files/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveFilestorageFile
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Files.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFileOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/folders"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listFilestorageFolder
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Filestorage.Folders.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/filestorage/folders"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createFilestorageFolder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Folders.Create(ctx, "<value>", components.UnifiedFilestorageFolderInput{
                    Name: gosdk.String("school"),
                    Size: gosdk.String("2048"),
                    FolderURL: gosdk.String("https://example.com/school"),
                    Description: "All things school related",
                    DriveID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ParentFolderID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    SharedLink: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Permission: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFolderOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/folders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveFilestorageFolder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Folders.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFolderOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/groups"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listFilestorageGroup
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Filestorage.Groups.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/filestorage/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveFilestorageGroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Groups.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageGroupOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listFilestorageUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Filestorage.Users.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/filestorage/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveFilestorageUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Users.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageUserOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/health"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: health
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Health(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Number != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/bankinfos"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisBankInfo
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Bankinfos.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/bankinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisBankInfo
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Bankinfos.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisBankinfoOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/benefits"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisBenefits
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Benefits.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/benefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisBenefit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Benefits.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisBenefitOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/companies"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisCompanies
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Companies.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Companies.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisCompanyOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/dependents"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisDependents
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Dependents.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/dependents/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisDependent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Dependents.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisDependentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employeepayrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisEmployeePayrollRun
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Employeepayrollruns.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/employeepayrollruns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisEmployeePayrollRun
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Employeepayrollruns.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeepayrollrunOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employees"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisEmployees
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Employees.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/employees"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createHrisEmployee
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Employees.Create(ctx, "<value>", components.UnifiedHrisEmployeeInput{
                    Groups: []string{
                        "Group1",
                        "Group2",
                    },
                    Locations: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    EmployeeNumber: gosdk.String("EMP001"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FirstName: gosdk.String("John"),
                    LastName: gosdk.String("Doe"),
                    PreferredName: gosdk.String("Johnny"),
                    DisplayFullName: gosdk.String("John Doe"),
                    Username: gosdk.String("johndoe"),
                    WorkEmail: gosdk.String("john.doe@company.com"),
                    PersonalEmail: gosdk.String("john.doe@personal.com"),
                    MobilePhoneNumber: gosdk.String("+1234567890"),
                    Employments: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    Ssn: gosdk.String("123-45-6789"),
                    Gender: gosdk.String("MALE"),
                    Ethnicity: gosdk.String("AMERICAN_INDIAN_OR_ALASKA_NATIVE"),
                    MaritalStatus: gosdk.String("Married"),
                    DateOfBirth: types.MustNewTimeFromString("1990-01-01"),
                    StartDate: types.MustNewTimeFromString("2020-01-01"),
                    EmploymentStatus: gosdk.String("ACTIVE"),
                    TerminationDate: types.MustNewTimeFromString("2025-01-01"),
                    AvatarURL: gosdk.String("https://example.com/avatar.jpg"),
                    ManagerID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: &components.UnifiedHrisEmployeeInputFieldMappings{},
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeeOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employees/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisEmployee
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Employees.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeeOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employerbenefits"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisEmployerBenefits
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Employerbenefits.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/employerbenefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisEmployerBenefit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Employerbenefits.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployerbenefitOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisEmployments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Employments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/employments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisEmployment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Employments.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmploymentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/groups"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisGroups
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Groups.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisGroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Groups.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisGroupOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/locations"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisLocations
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Locations.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisLocation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Locations.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisLocationOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/paygroups"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisPaygroups
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Paygroups.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/paygroups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisPaygroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Paygroups.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisPaygroupOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/payrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisPayrollRuns
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Payrollruns.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/payrollruns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisPayrollRun
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Payrollruns.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisPayrollrunOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/timeoffbalances"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisTimeoffbalances
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Timeoffbalances.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/timeoffbalances/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisTimeoffbalance
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Timeoffbalances.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffbalanceOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/timeoffs"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisTimeoffs
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Timeoffs.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/timeoffs"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createHrisTimeoff
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Timeoffs.Create(ctx, "<value>", components.UnifiedHrisTimeoffInput{
                    Employee: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Approver: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Status: gosdk.String("REQUESTED"),
                    EmployeeNote: gosdk.String("Annual vacation"),
                    Units: gosdk.String("DAYS"),
                    Amount: gosdk.Float64(5),
                    RequestType: gosdk.String("VACATION"),
                    StartTime: types.MustNewTimeFromString("2024-07-01T09:00:00Z"),
                    EndTime: types.MustNewTimeFromString("2024-07-05T17:00:00Z"),
                    FieldMappings: &components.UnifiedHrisTimeoffInputFieldMappings{},
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/timeoffs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisTimeoff
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Timeoffs.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/timesheetentries"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisTimesheetentries
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Hris.Timesheetentries.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/hris/timesheetentries"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createHrisTimesheetentry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Timesheetentries.Create(ctx, "<value>", components.UnifiedHrisTimesheetEntryInput{
                    HoursWorked: gosdk.Float64(40),
                    StartTime: types.MustNewTimeFromString("2024-10-01T08:00:00Z"),
                    EndTime: types.MustNewTimeFromString("2024-10-01T16:00:00Z"),
                    EmployeeID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    RemoteWasDeleted: gosdk.Bool(false),
                    FieldMappings: &components.UnifiedHrisTimesheetEntryInputFieldMappings{},
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimesheetEntryOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/timesheetentries/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisTimesheetentry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hris.Timesheetentries.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimesheetEntryOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/linked_users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listLinkedUsers
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponses != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/linked_users"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createLinkedUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.Create(ctx, components.CreateLinkedUserDto{
                    LinkedUserOriginID: "id_1",
                    Alias: gosdk.String("acme"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/linked_users/batch"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: importBatch
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.ImportBatch(ctx, components.CreateBatchLinkedUserDto{
                    LinkedUserOriginIds: []string{
                        "id_1",
                    },
                    Alias: gosdk.String("acme"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponses != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/linked_users/fromRemoteId"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: remoteId
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.RemoteID(ctx, "id_1")
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/linked_users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveLinkedUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.Retrieve(ctx, "801f9ede-c698-4e66-a7fc-48d19eebaa4f")
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/actions"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationAction
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Actions.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/marketingautomation/actions"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingautomationAction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.Create(ctx, "<value>", components.UnifiedMarketingautomationActionInput{}, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationActionOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/actions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationAction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationActionOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/automations"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationAutomations
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Automations.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/marketingautomation/automations"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingautomationAutomation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.Create(ctx, "<value>", components.UnifiedMarketingautomationAutomationInput{}, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationAutomationOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/automations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationAutomation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationAutomationOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/campaigns"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationCampaigns
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Campaigns.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/marketingautomation/campaigns"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingautomationCampaign
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.Create(ctx, "<value>", components.UnifiedMarketingautomationCampaignInput{}, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationCampaignOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/campaigns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationCampaign
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationCampaignOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingAutomationContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Contacts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/marketingautomation/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingAutomationContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.Create(ctx, "<value>", components.UnifiedMarketingautomationContactInput{}, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingAutomationContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/emails"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationEmails
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Emails.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/marketingautomation/emails/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationEmail
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Emails.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationEmailOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/events"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingAutomationEvents
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Events.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/marketingautomation/events/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationEvent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Events.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationEventOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/lists"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationLists
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Lists.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/marketingautomation/lists"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingautomationList
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.Create(ctx, "<value>", components.UnifiedMarketingautomationListInput{}, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationListOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationList
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationListOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/messages"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationMessages
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Messages.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/marketingautomation/messages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationMessage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Messages.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationMessageOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/templates"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationTemplates
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Templates.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/marketingautomation/templates"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingautomationTemplate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.Create(ctx, "<value>", components.UnifiedMarketingautomationTemplateInput{}, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationTemplateOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/templates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationTemplate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationTemplateOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingAutomationUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Users.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/marketingautomation/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingAutomationUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Users.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationUserOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/passthrough"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: request
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Passthrough.Request(ctx, "<value>", components.PassThroughRequestDto{
                    Method: components.PassThroughRequestDtoMethodGet,
                    Path: gosdk.String("/dev"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.TwoHundredApplicationJSONObject != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/passthrough/{retryId}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getRetriedRequestResponse
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Passthrough.{retryid}.GetRetriedRequestResponse(ctx, "<value>")
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/projects"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getProjects
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Projects.GetProjects(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ProjectResponses != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/projects"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createProject
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Projects.Create(ctx, components.CreateProjectDto{
                    Name: "Project Name",
                    IDOrganization: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    IDUser: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.ProjectResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rag/query"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: RagController_queryEmbeddings
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Rag.Query.RagControllerQueryEmbeddings(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/sync/pull-frequencies"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getPullFrequency
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Sync.GetPullFrequency(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UpdatePullFrequencyDto != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/sync/pull-frequencies"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: updatePullFrequency
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Sync.UpdatePullFrequency(ctx, components.UpdatePullFrequencyDto{
                    Crm: 1800,
                    Ats: 3600,
                    Hris: 7200,
                    Accounting: 14400,
                    Filestorage: 28800,
                    Ecommerce: 43200,
                    Ticketing: 86400,
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/sync/resync"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: resync
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Sync.Resync(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ResyncStatusDto != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/sync/status/{vertical}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: status
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/operations"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Sync.Status(ctx, operations.VerticalTicketing)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingAccount
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Accounts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ticketing/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Accounts.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAccountOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingAttachments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Attachments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ticketing/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createTicketingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Attachments.Create(ctx, "<value>", components.UnifiedTicketingAttachmentInput{
                    FileName: gosdk.String("features_planning.pdf"),
                    FileURL: gosdk.String("https://example.com/features_planning.pdf"),
                    Uploader: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TicketID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CommentID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Attachments.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/collections"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingCollections
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Collections.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ticketing/collections/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCollection
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Collections.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingCollectionOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/comments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingComments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Comments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ticketing/comments"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createTicketingComment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Comments.Create(ctx, "<value>", components.UnifiedTicketingCommentInput{
                    Body: gosdk.String("Assigned to Eric !"),
                    HTMLBody: gosdk.String("<p>Assigned to Eric !</p>"),
                    IsPrivate: gosdk.Bool(false),
                    CreatorType: gosdk.String("USER"),
                    TicketID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Attachments: []components.UnifiedTicketingCommentInputAttachments{
                        components.CreateUnifiedTicketingCommentInputAttachmentsStr(
                            "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingCommentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/comments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingComment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Comments.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Contacts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ticketing/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Contacts.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/tags"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingTags
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Tags.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ticketing/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingTag
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Tags.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTagOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/teams"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingTeams
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Teams.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ticketing/teams/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingTeam
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Teams.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTeamOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/tickets"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingTicket
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Tickets.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ticketing/tickets"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createTicketingTicket
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Tickets.Create(ctx, "<value>", components.UnifiedTicketingTicketInput{
                    Name: gosdk.String("Customer Service Inquiry"),
                    Status: gosdk.String("OPEN"),
                    Description: gosdk.String("Help customer"),
                    DueDate: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    Type: gosdk.String("BUG"),
                    ParentTicket: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Collections: []components.UnifiedTicketingTicketInputCollections{
                        components.CreateUnifiedTicketingTicketInputCollectionsStr(
                            "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                    Tags: []components.UnifiedTicketingTicketInputTags{
                        components.CreateUnifiedTicketingTicketInputTagsStr(
                            "my_tag",
                        ),
                        components.CreateUnifiedTicketingTicketInputTagsStr(
                            "urgent_tag",
                        ),
                    },
                    CompletedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    Priority: gosdk.String("HIGH"),
                    AssignedTo: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    Comment: &components.UnifiedTicketingTicketInputComment{
                        Body: gosdk.String("Assigned to Eric !"),
                        HTMLBody: gosdk.String("<p>Assigned to Eric !</p>"),
                        IsPrivate: gosdk.Bool(false),
                        CreatorType: gosdk.String("USER"),
                        TicketID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                        ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                        UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                        Attachments: []components.UnifiedTicketingTicketInputCommentAttachments{
                            components.CreateUnifiedTicketingTicketInputCommentAttachmentsStr(
                                "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                            ),
                        },
                    },
                    AccountID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Attachments: []components.UnifiedTicketingTicketInputAttachments{
                        components.CreateUnifiedTicketingTicketInputAttachmentsStr(
                            "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTicketOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/tickets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingTicket
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Tickets.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTicketOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Users.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
  - target: $["paths"]["/ticketing/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Users.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingUserOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/webhooks"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listWebhooks
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponses != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/webhooks"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createWebhookPublic
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.Create(ctx, components.WebhookDto{
                    URL: gosdk.String("https://acme.com/webhook_receiver"),
                    Description: gosdk.String("Webhook to receive connection events"),
                    Scope: []string{
                        "connection.created",
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/webhooks/verifyEvent"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: verifyEvent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.VerifyEvent(ctx, components.SignatureVerificationDto{
                    Payload: map[string]any{

                    },
                    Signature: gosdk.String("<value>"),
                    Secret: gosdk.String("<value>"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/webhooks/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: delete
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.Delete(ctx, "801f9ede-c698-4e66-a7fc-48d19eebaa4f")
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/webhooks/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: go
          label: updateStatus
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.UpdateStatus(ctx, "801f9ede-c698-4e66-a7fc-48d19eebaa4f")
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
