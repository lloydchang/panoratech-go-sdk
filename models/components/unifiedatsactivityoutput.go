// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

// ActivityType - The type of activity
type ActivityType string

const (
	ActivityTypeNote  ActivityType = "NOTE"
	ActivityTypeEmail ActivityType = "EMAIL"
	ActivityTypeOther ActivityType = "OTHER"
)

func (e ActivityType) ToPointer() *ActivityType {
	return &e
}
func (e *ActivityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOTE":
		fallthrough
	case "EMAIL":
		fallthrough
	case "OTHER":
		*e = ActivityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityType: %v", v)
	}
}

// Visibility - The visibility of the activity
type Visibility string

const (
	VisibilityAdminOnly Visibility = "ADMIN_ONLY"
	VisibilityPublic    Visibility = "PUBLIC"
	VisibilityPrivate   Visibility = "PRIVATE"
)

func (e Visibility) ToPointer() *Visibility {
	return &e
}
func (e *Visibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN_ONLY":
		fallthrough
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = Visibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Visibility: %v", v)
	}
}

type UnifiedAtsActivityOutput struct {
	// The type of activity
	ActivityType *ActivityType `json:"activity_type,omitempty"`
	// The subject of the activity
	Subject *string `json:"subject,omitempty"`
	// The body of the activity
	Body *string `json:"body,omitempty"`
	// The visibility of the activity
	Visibility *Visibility `json:"visibility,omitempty"`
	// The UUID of the candidate
	CandidateID *string `json:"candidate_id,omitempty"`
	// The remote creation date of the activity
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// The custom field mappings of the object between the remote 3rd party & Panora
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	// The UUID of the activity
	ID *string `json:"id,omitempty"`
	// The remote ID of the activity in the context of the 3rd Party
	RemoteID *string `json:"remote_id,omitempty"`
	// The remote data of the activity in the context of the 3rd Party
	RemoteData map[string]any `json:"remote_data,omitempty"`
	// The created date of the object
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The modified date of the object
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

func (u UnifiedAtsActivityOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UnifiedAtsActivityOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UnifiedAtsActivityOutput) GetActivityType() *ActivityType {
	if o == nil {
		return nil
	}
	return o.ActivityType
}

func (o *UnifiedAtsActivityOutput) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *UnifiedAtsActivityOutput) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *UnifiedAtsActivityOutput) GetVisibility() *Visibility {
	if o == nil {
		return nil
	}
	return o.Visibility
}

func (o *UnifiedAtsActivityOutput) GetCandidateID() *string {
	if o == nil {
		return nil
	}
	return o.CandidateID
}

func (o *UnifiedAtsActivityOutput) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *UnifiedAtsActivityOutput) GetFieldMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *UnifiedAtsActivityOutput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UnifiedAtsActivityOutput) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *UnifiedAtsActivityOutput) GetRemoteData() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *UnifiedAtsActivityOutput) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UnifiedAtsActivityOutput) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}
