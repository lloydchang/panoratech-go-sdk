// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

// UnifiedHrisBenefitOutputFieldMappings - The custom field mappings of the object between the remote 3rd party & Panora
type UnifiedHrisBenefitOutputFieldMappings struct {
}

// UnifiedHrisBenefitOutputRemoteData - The remote data of the benefit in the context of the 3rd Party
type UnifiedHrisBenefitOutputRemoteData struct {
}

type UnifiedHrisBenefitOutput struct {
	// The name of the benefit provider
	ProviderName *string `json:"provider_name,omitempty"`
	// The UUID of the associated employee
	EmployeeID *string `json:"employee_id,omitempty"`
	// The employee contribution amount
	EmployeeContribution *float64 `json:"employee_contribution,omitempty"`
	// The company contribution amount
	CompanyContribution *float64 `json:"company_contribution,omitempty"`
	// The start date of the benefit
	StartDate *time.Time `json:"start_date,omitempty"`
	// The end date of the benefit
	EndDate *time.Time `json:"end_date,omitempty"`
	// The UUID of the associated employer benefit
	EmployerBenefitID *string `json:"employer_benefit_id,omitempty"`
	// The custom field mappings of the object between the remote 3rd party & Panora
	FieldMappings *UnifiedHrisBenefitOutputFieldMappings `json:"field_mappings,omitempty"`
	// The UUID of the benefit record
	ID *string `json:"id,omitempty"`
	// The remote ID of the benefit in the context of the 3rd Party
	RemoteID *string `json:"remote_id,omitempty"`
	// The remote data of the benefit in the context of the 3rd Party
	RemoteData *UnifiedHrisBenefitOutputRemoteData `json:"remote_data,omitempty"`
	// The date when the benefit was created in the 3rd party system
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// The created date of the benefit record
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The last modified date of the benefit record
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// Indicates if the benefit was deleted in the remote system
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
}

func (u UnifiedHrisBenefitOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UnifiedHrisBenefitOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UnifiedHrisBenefitOutput) GetProviderName() *string {
	if o == nil {
		return nil
	}
	return o.ProviderName
}

func (o *UnifiedHrisBenefitOutput) GetEmployeeID() *string {
	if o == nil {
		return nil
	}
	return o.EmployeeID
}

func (o *UnifiedHrisBenefitOutput) GetEmployeeContribution() *float64 {
	if o == nil {
		return nil
	}
	return o.EmployeeContribution
}

func (o *UnifiedHrisBenefitOutput) GetCompanyContribution() *float64 {
	if o == nil {
		return nil
	}
	return o.CompanyContribution
}

func (o *UnifiedHrisBenefitOutput) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *UnifiedHrisBenefitOutput) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *UnifiedHrisBenefitOutput) GetEmployerBenefitID() *string {
	if o == nil {
		return nil
	}
	return o.EmployerBenefitID
}

func (o *UnifiedHrisBenefitOutput) GetFieldMappings() *UnifiedHrisBenefitOutputFieldMappings {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *UnifiedHrisBenefitOutput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UnifiedHrisBenefitOutput) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *UnifiedHrisBenefitOutput) GetRemoteData() *UnifiedHrisBenefitOutputRemoteData {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *UnifiedHrisBenefitOutput) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *UnifiedHrisBenefitOutput) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UnifiedHrisBenefitOutput) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *UnifiedHrisBenefitOutput) GetRemoteWasDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteWasDeleted
}
