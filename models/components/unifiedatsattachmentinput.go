// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

// UnifiedAtsAttachmentInputAttachmentType - The type of the file
type UnifiedAtsAttachmentInputAttachmentType string

const (
	UnifiedAtsAttachmentInputAttachmentTypeResume      UnifiedAtsAttachmentInputAttachmentType = "RESUME"
	UnifiedAtsAttachmentInputAttachmentTypeCoverLetter UnifiedAtsAttachmentInputAttachmentType = "COVER_LETTER"
	UnifiedAtsAttachmentInputAttachmentTypeOfferLetter UnifiedAtsAttachmentInputAttachmentType = "OFFER_LETTER"
	UnifiedAtsAttachmentInputAttachmentTypeOther       UnifiedAtsAttachmentInputAttachmentType = "OTHER"
)

func (e UnifiedAtsAttachmentInputAttachmentType) ToPointer() *UnifiedAtsAttachmentInputAttachmentType {
	return &e
}
func (e *UnifiedAtsAttachmentInputAttachmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESUME":
		fallthrough
	case "COVER_LETTER":
		fallthrough
	case "OFFER_LETTER":
		fallthrough
	case "OTHER":
		*e = UnifiedAtsAttachmentInputAttachmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnifiedAtsAttachmentInputAttachmentType: %v", v)
	}
}

type UnifiedAtsAttachmentInput struct {
	// The URL of the file
	FileURL *string `json:"file_url,omitempty"`
	// The name of the file
	FileName *string `json:"file_name,omitempty"`
	// The type of the file
	AttachmentType *UnifiedAtsAttachmentInputAttachmentType `json:"attachment_type,omitempty"`
	// The remote creation date of the attachment
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// The remote modification date of the attachment
	RemoteModifiedAt *time.Time `json:"remote_modified_at,omitempty"`
	// The UUID of the candidate
	CandidateID *string `json:"candidate_id,omitempty"`
	// The custom field mappings of the object between the remote 3rd party & Panora
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
}

func (u UnifiedAtsAttachmentInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UnifiedAtsAttachmentInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UnifiedAtsAttachmentInput) GetFileURL() *string {
	if o == nil {
		return nil
	}
	return o.FileURL
}

func (o *UnifiedAtsAttachmentInput) GetFileName() *string {
	if o == nil {
		return nil
	}
	return o.FileName
}

func (o *UnifiedAtsAttachmentInput) GetAttachmentType() *UnifiedAtsAttachmentInputAttachmentType {
	if o == nil {
		return nil
	}
	return o.AttachmentType
}

func (o *UnifiedAtsAttachmentInput) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *UnifiedAtsAttachmentInput) GetRemoteModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteModifiedAt
}

func (o *UnifiedAtsAttachmentInput) GetCandidateID() *string {
	if o == nil {
		return nil
	}
	return o.CandidateID
}

func (o *UnifiedAtsAttachmentInput) GetFieldMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}
