// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

// UnifiedTicketingTicketInputStatus - The status of the ticket. Authorized values are OPEN or CLOSED.
type UnifiedTicketingTicketInputStatus string

const (
	UnifiedTicketingTicketInputStatusOpen   UnifiedTicketingTicketInputStatus = "OPEN"
	UnifiedTicketingTicketInputStatusClosed UnifiedTicketingTicketInputStatus = "CLOSED"
)

func (e UnifiedTicketingTicketInputStatus) ToPointer() *UnifiedTicketingTicketInputStatus {
	return &e
}
func (e *UnifiedTicketingTicketInputStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		*e = UnifiedTicketingTicketInputStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnifiedTicketingTicketInputStatus: %v", v)
	}
}

// UnifiedTicketingTicketInputType - The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
type UnifiedTicketingTicketInputType string

const (
	UnifiedTicketingTicketInputTypeBug     UnifiedTicketingTicketInputType = "BUG"
	UnifiedTicketingTicketInputTypeSubtask UnifiedTicketingTicketInputType = "SUBTASK"
	UnifiedTicketingTicketInputTypeTask    UnifiedTicketingTicketInputType = "TASK"
	UnifiedTicketingTicketInputTypeToDo    UnifiedTicketingTicketInputType = "TO-DO"
)

func (e UnifiedTicketingTicketInputType) ToPointer() *UnifiedTicketingTicketInputType {
	return &e
}
func (e *UnifiedTicketingTicketInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUG":
		fallthrough
	case "SUBTASK":
		fallthrough
	case "TASK":
		fallthrough
	case "TO-DO":
		*e = UnifiedTicketingTicketInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnifiedTicketingTicketInputType: %v", v)
	}
}

type UnifiedTicketingTicketInputCollectionsType string

const (
	UnifiedTicketingTicketInputCollectionsTypeStr                              UnifiedTicketingTicketInputCollectionsType = "str"
	UnifiedTicketingTicketInputCollectionsTypeUnifiedTicketingCollectionOutput UnifiedTicketingTicketInputCollectionsType = "UnifiedTicketingCollectionOutput"
)

type UnifiedTicketingTicketInputCollections struct {
	Str                              *string
	UnifiedTicketingCollectionOutput *UnifiedTicketingCollectionOutput

	Type UnifiedTicketingTicketInputCollectionsType
}

func CreateUnifiedTicketingTicketInputCollectionsStr(str string) UnifiedTicketingTicketInputCollections {
	typ := UnifiedTicketingTicketInputCollectionsTypeStr

	return UnifiedTicketingTicketInputCollections{
		Str:  &str,
		Type: typ,
	}
}

func CreateUnifiedTicketingTicketInputCollectionsUnifiedTicketingCollectionOutput(unifiedTicketingCollectionOutput UnifiedTicketingCollectionOutput) UnifiedTicketingTicketInputCollections {
	typ := UnifiedTicketingTicketInputCollectionsTypeUnifiedTicketingCollectionOutput

	return UnifiedTicketingTicketInputCollections{
		UnifiedTicketingCollectionOutput: &unifiedTicketingCollectionOutput,
		Type:                             typ,
	}
}

func (u *UnifiedTicketingTicketInputCollections) UnmarshalJSON(data []byte) error {

	var unifiedTicketingCollectionOutput UnifiedTicketingCollectionOutput = UnifiedTicketingCollectionOutput{}
	if err := utils.UnmarshalJSON(data, &unifiedTicketingCollectionOutput, "", true, true); err == nil {
		u.UnifiedTicketingCollectionOutput = &unifiedTicketingCollectionOutput
		u.Type = UnifiedTicketingTicketInputCollectionsTypeUnifiedTicketingCollectionOutput
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UnifiedTicketingTicketInputCollectionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UnifiedTicketingTicketInputCollections", string(data))
}

func (u UnifiedTicketingTicketInputCollections) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UnifiedTicketingCollectionOutput != nil {
		return utils.MarshalJSON(u.UnifiedTicketingCollectionOutput, "", true)
	}

	return nil, errors.New("could not marshal union type UnifiedTicketingTicketInputCollections: all fields are null")
}

type UnifiedTicketingTicketInputTagsType string

const (
	UnifiedTicketingTicketInputTagsTypeStr                       UnifiedTicketingTicketInputTagsType = "str"
	UnifiedTicketingTicketInputTagsTypeUnifiedTicketingTagOutput UnifiedTicketingTicketInputTagsType = "UnifiedTicketingTagOutput"
)

type UnifiedTicketingTicketInputTags struct {
	Str                       *string
	UnifiedTicketingTagOutput *UnifiedTicketingTagOutput

	Type UnifiedTicketingTicketInputTagsType
}

func CreateUnifiedTicketingTicketInputTagsStr(str string) UnifiedTicketingTicketInputTags {
	typ := UnifiedTicketingTicketInputTagsTypeStr

	return UnifiedTicketingTicketInputTags{
		Str:  &str,
		Type: typ,
	}
}

func CreateUnifiedTicketingTicketInputTagsUnifiedTicketingTagOutput(unifiedTicketingTagOutput UnifiedTicketingTagOutput) UnifiedTicketingTicketInputTags {
	typ := UnifiedTicketingTicketInputTagsTypeUnifiedTicketingTagOutput

	return UnifiedTicketingTicketInputTags{
		UnifiedTicketingTagOutput: &unifiedTicketingTagOutput,
		Type:                      typ,
	}
}

func (u *UnifiedTicketingTicketInputTags) UnmarshalJSON(data []byte) error {

	var unifiedTicketingTagOutput UnifiedTicketingTagOutput = UnifiedTicketingTagOutput{}
	if err := utils.UnmarshalJSON(data, &unifiedTicketingTagOutput, "", true, true); err == nil {
		u.UnifiedTicketingTagOutput = &unifiedTicketingTagOutput
		u.Type = UnifiedTicketingTicketInputTagsTypeUnifiedTicketingTagOutput
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UnifiedTicketingTicketInputTagsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UnifiedTicketingTicketInputTags", string(data))
}

func (u UnifiedTicketingTicketInputTags) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UnifiedTicketingTagOutput != nil {
		return utils.MarshalJSON(u.UnifiedTicketingTagOutput, "", true)
	}

	return nil, errors.New("could not marshal union type UnifiedTicketingTicketInputTags: all fields are null")
}

// UnifiedTicketingTicketInputPriority - The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
type UnifiedTicketingTicketInputPriority string

const (
	UnifiedTicketingTicketInputPriorityHigh   UnifiedTicketingTicketInputPriority = "HIGH"
	UnifiedTicketingTicketInputPriorityMedium UnifiedTicketingTicketInputPriority = "MEDIUM"
	UnifiedTicketingTicketInputPriorityLow    UnifiedTicketingTicketInputPriority = "LOW"
)

func (e UnifiedTicketingTicketInputPriority) ToPointer() *UnifiedTicketingTicketInputPriority {
	return &e
}
func (e *UnifiedTicketingTicketInputPriority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		*e = UnifiedTicketingTicketInputPriority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnifiedTicketingTicketInputPriority: %v", v)
	}
}

// UnifiedTicketingTicketInputCreatorType - The creator type of the comment. Authorized values are either USER or CONTACT
type UnifiedTicketingTicketInputCreatorType string

const (
	UnifiedTicketingTicketInputCreatorTypeUser    UnifiedTicketingTicketInputCreatorType = "USER"
	UnifiedTicketingTicketInputCreatorTypeContact UnifiedTicketingTicketInputCreatorType = "CONTACT"
)

func (e UnifiedTicketingTicketInputCreatorType) ToPointer() *UnifiedTicketingTicketInputCreatorType {
	return &e
}
func (e *UnifiedTicketingTicketInputCreatorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USER":
		fallthrough
	case "CONTACT":
		*e = UnifiedTicketingTicketInputCreatorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnifiedTicketingTicketInputCreatorType: %v", v)
	}
}

type UnifiedTicketingTicketInputCommentAttachmentsType string

const (
	UnifiedTicketingTicketInputCommentAttachmentsTypeStr                              UnifiedTicketingTicketInputCommentAttachmentsType = "str"
	UnifiedTicketingTicketInputCommentAttachmentsTypeUnifiedTicketingAttachmentOutput UnifiedTicketingTicketInputCommentAttachmentsType = "UnifiedTicketingAttachmentOutput"
)

type UnifiedTicketingTicketInputCommentAttachments struct {
	Str                              *string
	UnifiedTicketingAttachmentOutput *UnifiedTicketingAttachmentOutput

	Type UnifiedTicketingTicketInputCommentAttachmentsType
}

func CreateUnifiedTicketingTicketInputCommentAttachmentsStr(str string) UnifiedTicketingTicketInputCommentAttachments {
	typ := UnifiedTicketingTicketInputCommentAttachmentsTypeStr

	return UnifiedTicketingTicketInputCommentAttachments{
		Str:  &str,
		Type: typ,
	}
}

func CreateUnifiedTicketingTicketInputCommentAttachmentsUnifiedTicketingAttachmentOutput(unifiedTicketingAttachmentOutput UnifiedTicketingAttachmentOutput) UnifiedTicketingTicketInputCommentAttachments {
	typ := UnifiedTicketingTicketInputCommentAttachmentsTypeUnifiedTicketingAttachmentOutput

	return UnifiedTicketingTicketInputCommentAttachments{
		UnifiedTicketingAttachmentOutput: &unifiedTicketingAttachmentOutput,
		Type:                             typ,
	}
}

func (u *UnifiedTicketingTicketInputCommentAttachments) UnmarshalJSON(data []byte) error {

	var unifiedTicketingAttachmentOutput UnifiedTicketingAttachmentOutput = UnifiedTicketingAttachmentOutput{}
	if err := utils.UnmarshalJSON(data, &unifiedTicketingAttachmentOutput, "", true, true); err == nil {
		u.UnifiedTicketingAttachmentOutput = &unifiedTicketingAttachmentOutput
		u.Type = UnifiedTicketingTicketInputCommentAttachmentsTypeUnifiedTicketingAttachmentOutput
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UnifiedTicketingTicketInputCommentAttachmentsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UnifiedTicketingTicketInputCommentAttachments", string(data))
}

func (u UnifiedTicketingTicketInputCommentAttachments) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UnifiedTicketingAttachmentOutput != nil {
		return utils.MarshalJSON(u.UnifiedTicketingAttachmentOutput, "", true)
	}

	return nil, errors.New("could not marshal union type UnifiedTicketingTicketInputCommentAttachments: all fields are null")
}

// UnifiedTicketingTicketInputComment - The comment of the ticket
type UnifiedTicketingTicketInputComment struct {
	// The body of the comment
	Body *string `json:"body"`
	// The html body of the comment
	HTMLBody *string `json:"html_body,omitempty"`
	// The public status of the comment
	IsPrivate *bool `json:"is_private,omitempty"`
	// The creator type of the comment. Authorized values are either USER or CONTACT
	CreatorType *UnifiedTicketingTicketInputCreatorType `json:"creator_type,omitempty"`
	// The UUID of the ticket the comment is tied to
	TicketID *string `json:"ticket_id,omitempty"`
	// The UUID of the contact which the comment belongs to (if no user_id specified)
	ContactID *string `json:"contact_id,omitempty"`
	// The UUID of the user which the comment belongs to (if no contact_id specified)
	UserID *string `json:"user_id,omitempty"`
	// The attachements UUIDs tied to the comment
	Attachments []UnifiedTicketingTicketInputCommentAttachments `json:"attachments,omitempty"`
}

func (o *UnifiedTicketingTicketInputComment) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *UnifiedTicketingTicketInputComment) GetHTMLBody() *string {
	if o == nil {
		return nil
	}
	return o.HTMLBody
}

func (o *UnifiedTicketingTicketInputComment) GetIsPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrivate
}

func (o *UnifiedTicketingTicketInputComment) GetCreatorType() *UnifiedTicketingTicketInputCreatorType {
	if o == nil {
		return nil
	}
	return o.CreatorType
}

func (o *UnifiedTicketingTicketInputComment) GetTicketID() *string {
	if o == nil {
		return nil
	}
	return o.TicketID
}

func (o *UnifiedTicketingTicketInputComment) GetContactID() *string {
	if o == nil {
		return nil
	}
	return o.ContactID
}

func (o *UnifiedTicketingTicketInputComment) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *UnifiedTicketingTicketInputComment) GetAttachments() []UnifiedTicketingTicketInputCommentAttachments {
	if o == nil {
		return nil
	}
	return o.Attachments
}

type UnifiedTicketingTicketInputAttachmentsType string

const (
	UnifiedTicketingTicketInputAttachmentsTypeStr                             UnifiedTicketingTicketInputAttachmentsType = "str"
	UnifiedTicketingTicketInputAttachmentsTypeUnifiedTicketingAttachmentInput UnifiedTicketingTicketInputAttachmentsType = "UnifiedTicketingAttachmentInput"
)

type UnifiedTicketingTicketInputAttachments struct {
	Str                             *string
	UnifiedTicketingAttachmentInput *UnifiedTicketingAttachmentInput

	Type UnifiedTicketingTicketInputAttachmentsType
}

func CreateUnifiedTicketingTicketInputAttachmentsStr(str string) UnifiedTicketingTicketInputAttachments {
	typ := UnifiedTicketingTicketInputAttachmentsTypeStr

	return UnifiedTicketingTicketInputAttachments{
		Str:  &str,
		Type: typ,
	}
}

func CreateUnifiedTicketingTicketInputAttachmentsUnifiedTicketingAttachmentInput(unifiedTicketingAttachmentInput UnifiedTicketingAttachmentInput) UnifiedTicketingTicketInputAttachments {
	typ := UnifiedTicketingTicketInputAttachmentsTypeUnifiedTicketingAttachmentInput

	return UnifiedTicketingTicketInputAttachments{
		UnifiedTicketingAttachmentInput: &unifiedTicketingAttachmentInput,
		Type:                            typ,
	}
}

func (u *UnifiedTicketingTicketInputAttachments) UnmarshalJSON(data []byte) error {

	var unifiedTicketingAttachmentInput UnifiedTicketingAttachmentInput = UnifiedTicketingAttachmentInput{}
	if err := utils.UnmarshalJSON(data, &unifiedTicketingAttachmentInput, "", true, true); err == nil {
		u.UnifiedTicketingAttachmentInput = &unifiedTicketingAttachmentInput
		u.Type = UnifiedTicketingTicketInputAttachmentsTypeUnifiedTicketingAttachmentInput
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UnifiedTicketingTicketInputAttachmentsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UnifiedTicketingTicketInputAttachments", string(data))
}

func (u UnifiedTicketingTicketInputAttachments) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UnifiedTicketingAttachmentInput != nil {
		return utils.MarshalJSON(u.UnifiedTicketingAttachmentInput, "", true)
	}

	return nil, errors.New("could not marshal union type UnifiedTicketingTicketInputAttachments: all fields are null")
}

type UnifiedTicketingTicketInput struct {
	// The name of the ticket
	Name *string `json:"name"`
	// The status of the ticket. Authorized values are OPEN or CLOSED.
	Status *UnifiedTicketingTicketInputStatus `json:"status,omitempty"`
	// The description of the ticket
	Description *string `json:"description"`
	// The date the ticket is due
	DueDate *time.Time `json:"due_date,omitempty"`
	// The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
	Type *UnifiedTicketingTicketInputType `json:"type,omitempty"`
	// The UUID of the parent ticket
	ParentTicket *string `json:"parent_ticket,omitempty"`
	// The collection UUIDs the ticket belongs to
	Collections []UnifiedTicketingTicketInputCollections `json:"collections,omitempty"`
	// The tags names of the ticket
	Tags []UnifiedTicketingTicketInputTags `json:"tags,omitempty"`
	// The date the ticket has been completed
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
	Priority *UnifiedTicketingTicketInputPriority `json:"priority,omitempty"`
	// The users UUIDs the ticket is assigned to
	AssignedTo []string `json:"assigned_to,omitempty"`
	// The comment of the ticket
	Comment *UnifiedTicketingTicketInputComment `json:"comment,omitempty"`
	// The UUID of the account which the ticket belongs to
	AccountID *string `json:"account_id,omitempty"`
	// The UUID of the contact which the ticket belongs to
	ContactID *string `json:"contact_id,omitempty"`
	// The attachements UUIDs tied to the ticket
	Attachments []UnifiedTicketingTicketInputAttachments `json:"attachments,omitempty"`
	// The custom field mappings of the ticket between the remote 3rd party & Panora
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
}

func (u UnifiedTicketingTicketInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UnifiedTicketingTicketInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UnifiedTicketingTicketInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UnifiedTicketingTicketInput) GetStatus() *UnifiedTicketingTicketInputStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UnifiedTicketingTicketInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UnifiedTicketingTicketInput) GetDueDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *UnifiedTicketingTicketInput) GetType() *UnifiedTicketingTicketInputType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UnifiedTicketingTicketInput) GetParentTicket() *string {
	if o == nil {
		return nil
	}
	return o.ParentTicket
}

func (o *UnifiedTicketingTicketInput) GetCollections() []UnifiedTicketingTicketInputCollections {
	if o == nil {
		return nil
	}
	return o.Collections
}

func (o *UnifiedTicketingTicketInput) GetTags() []UnifiedTicketingTicketInputTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *UnifiedTicketingTicketInput) GetCompletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *UnifiedTicketingTicketInput) GetPriority() *UnifiedTicketingTicketInputPriority {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *UnifiedTicketingTicketInput) GetAssignedTo() []string {
	if o == nil {
		return nil
	}
	return o.AssignedTo
}

func (o *UnifiedTicketingTicketInput) GetComment() *UnifiedTicketingTicketInputComment {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *UnifiedTicketingTicketInput) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *UnifiedTicketingTicketInput) GetContactID() *string {
	if o == nil {
		return nil
	}
	return o.ContactID
}

func (o *UnifiedTicketingTicketInput) GetAttachments() []UnifiedTicketingTicketInputAttachments {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *UnifiedTicketingTicketInput) GetFieldMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}
