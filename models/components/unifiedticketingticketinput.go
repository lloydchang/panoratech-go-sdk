// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

// UnifiedTicketingTicketInputComment - The comment of the ticket
type UnifiedTicketingTicketInputComment struct {
	// The body of the comment
	Body *string `json:"body"`
	// The html body of the comment
	HTMLBody *string `json:"html_body,omitempty"`
	// The public status of the comment
	IsPrivate *bool `json:"is_private,omitempty"`
	// The creator type of the comment. Authorized values are either USER or CONTACT
	CreatorType *string `json:"creator_type,omitempty"`
	// The UUID of the ticket the comment is tied to
	TicketID *string `json:"ticket_id,omitempty"`
	// The UUID of the contact which the comment belongs to (if no user_id specified)
	ContactID *string `json:"contact_id,omitempty"`
	// The UUID of the user which the comment belongs to (if no contact_id specified)
	UserID *string `json:"user_id,omitempty"`
	// The attachements UUIDs tied to the comment
	Attachments []string `json:"attachments,omitempty"`
}

func (o *UnifiedTicketingTicketInputComment) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *UnifiedTicketingTicketInputComment) GetHTMLBody() *string {
	if o == nil {
		return nil
	}
	return o.HTMLBody
}

func (o *UnifiedTicketingTicketInputComment) GetIsPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrivate
}

func (o *UnifiedTicketingTicketInputComment) GetCreatorType() *string {
	if o == nil {
		return nil
	}
	return o.CreatorType
}

func (o *UnifiedTicketingTicketInputComment) GetTicketID() *string {
	if o == nil {
		return nil
	}
	return o.TicketID
}

func (o *UnifiedTicketingTicketInputComment) GetContactID() *string {
	if o == nil {
		return nil
	}
	return o.ContactID
}

func (o *UnifiedTicketingTicketInputComment) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *UnifiedTicketingTicketInputComment) GetAttachments() []string {
	if o == nil {
		return nil
	}
	return o.Attachments
}

type UnifiedTicketingTicketInput struct {
	// The name of the ticket
	Name *string `json:"name"`
	// The status of the ticket. Authorized values are OPEN or CLOSED.
	Status *string `json:"status,omitempty"`
	// The description of the ticket
	Description *string `json:"description"`
	// The date the ticket is due
	DueDate *time.Time `json:"due_date,omitempty"`
	// The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
	Type *string `json:"type,omitempty"`
	// The UUID of the parent ticket
	ParentTicket *string `json:"parent_ticket,omitempty"`
	// The collection UUIDs the ticket belongs to
	Collections *string `json:"collections,omitempty"`
	// The tags names of the ticket
	Tags []string `json:"tags,omitempty"`
	// The date the ticket has been completed
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
	Priority *string `json:"priority,omitempty"`
	// The users UUIDs the ticket is assigned to
	AssignedTo []string `json:"assigned_to,omitempty"`
	// The comment of the ticket
	Comment *UnifiedTicketingTicketInputComment `json:"comment,omitempty"`
	// The UUID of the account which the ticket belongs to
	AccountID *string `json:"account_id,omitempty"`
	// The UUID of the contact which the ticket belongs to
	ContactID *string `json:"contact_id,omitempty"`
	// The attachments UUIDs tied to the ticket
	Attachments []string `json:"attachments,omitempty"`
	// The custom field mappings of the ticket between the remote 3rd party & Panora
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
}

func (u UnifiedTicketingTicketInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UnifiedTicketingTicketInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UnifiedTicketingTicketInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UnifiedTicketingTicketInput) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UnifiedTicketingTicketInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UnifiedTicketingTicketInput) GetDueDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *UnifiedTicketingTicketInput) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UnifiedTicketingTicketInput) GetParentTicket() *string {
	if o == nil {
		return nil
	}
	return o.ParentTicket
}

func (o *UnifiedTicketingTicketInput) GetCollections() *string {
	if o == nil {
		return nil
	}
	return o.Collections
}

func (o *UnifiedTicketingTicketInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *UnifiedTicketingTicketInput) GetCompletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *UnifiedTicketingTicketInput) GetPriority() *string {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *UnifiedTicketingTicketInput) GetAssignedTo() []string {
	if o == nil {
		return nil
	}
	return o.AssignedTo
}

func (o *UnifiedTicketingTicketInput) GetComment() *UnifiedTicketingTicketInputComment {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *UnifiedTicketingTicketInput) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *UnifiedTicketingTicketInput) GetContactID() *string {
	if o == nil {
		return nil
	}
	return o.ContactID
}

func (o *UnifiedTicketingTicketInput) GetAttachments() []string {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *UnifiedTicketingTicketInput) GetFieldMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}
