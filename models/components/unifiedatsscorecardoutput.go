// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

// OverallRecommendation - The overall recommendation
type OverallRecommendation string

const (
	OverallRecommendationDefinitelyNo OverallRecommendation = "DEFINITELY_NO"
	OverallRecommendationNo           OverallRecommendation = "NO"
	OverallRecommendationYes          OverallRecommendation = "YES"
	OverallRecommendationStrongYes    OverallRecommendation = "STRONG_YES"
	OverallRecommendationNoDecision   OverallRecommendation = "NO_DECISION"
)

func (e OverallRecommendation) ToPointer() *OverallRecommendation {
	return &e
}
func (e *OverallRecommendation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEFINITELY_NO":
		fallthrough
	case "NO":
		fallthrough
	case "YES":
		fallthrough
	case "STRONG_YES":
		fallthrough
	case "NO_DECISION":
		*e = OverallRecommendation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OverallRecommendation: %v", v)
	}
}

type UnifiedAtsScorecardOutput struct {
	// The overall recommendation
	OverallRecommendation *OverallRecommendation `json:"overall_recommendation,omitempty"`
	// The UUID of the application
	ApplicationID *string `json:"application_id,omitempty"`
	// The UUID of the interview
	InterviewID *string `json:"interview_id,omitempty"`
	// The remote creation date of the scorecard
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// The submission date of the scorecard
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`
	// The custom field mappings of the object between the remote 3rd party & Panora
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	// The UUID of the scorecard
	ID *string `json:"id,omitempty"`
	// The remote ID of the scorecard in the context of the 3rd Party
	RemoteID *string `json:"remote_id,omitempty"`
	// The remote data of the scorecard in the context of the 3rd Party
	RemoteData map[string]any `json:"remote_data,omitempty"`
	// The created date of the object
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The modified date of the object
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

func (u UnifiedAtsScorecardOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UnifiedAtsScorecardOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UnifiedAtsScorecardOutput) GetOverallRecommendation() *OverallRecommendation {
	if o == nil {
		return nil
	}
	return o.OverallRecommendation
}

func (o *UnifiedAtsScorecardOutput) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *UnifiedAtsScorecardOutput) GetInterviewID() *string {
	if o == nil {
		return nil
	}
	return o.InterviewID
}

func (o *UnifiedAtsScorecardOutput) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *UnifiedAtsScorecardOutput) GetSubmittedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.SubmittedAt
}

func (o *UnifiedAtsScorecardOutput) GetFieldMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *UnifiedAtsScorecardOutput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UnifiedAtsScorecardOutput) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *UnifiedAtsScorecardOutput) GetRemoteData() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *UnifiedAtsScorecardOutput) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UnifiedAtsScorecardOutput) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}
