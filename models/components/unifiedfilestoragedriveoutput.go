// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

type UnifiedFilestorageDriveOutput struct {
	// The name of the drive
	Name *string `json:"name"`
	// When the third party s drive was created.
	RemoteCreatedAt *string `json:"remote_created_at"`
	// The url of the drive
	DriveURL *string `json:"drive_url"`
	// The custom field mappings of the object between the remote 3rd party & Panora
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	// The UUID of the drive
	ID *string `json:"id,omitempty"`
	// The id of the drive in the context of the 3rd Party
	RemoteID *string `json:"remote_id,omitempty"`
	// The remote data of the drive in the context of the 3rd Party
	RemoteData map[string]any `json:"remote_data,omitempty"`
	// The created date of the object
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The modified date of the object
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

func (u UnifiedFilestorageDriveOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UnifiedFilestorageDriveOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UnifiedFilestorageDriveOutput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UnifiedFilestorageDriveOutput) GetRemoteCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *UnifiedFilestorageDriveOutput) GetDriveURL() *string {
	if o == nil {
		return nil
	}
	return o.DriveURL
}

func (o *UnifiedFilestorageDriveOutput) GetFieldMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *UnifiedFilestorageDriveOutput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UnifiedFilestorageDriveOutput) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *UnifiedFilestorageDriveOutput) GetRemoteData() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *UnifiedFilestorageDriveOutput) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UnifiedFilestorageDriveOutput) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}
