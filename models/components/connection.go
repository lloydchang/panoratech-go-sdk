// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

// TokenType - Strategy type
type TokenType string

const (
	TokenTypeOauth2 TokenType = "oauth2"
	TokenTypeApikey TokenType = "apikey"
	TokenTypeBasic  TokenType = "basic"
)

func (e TokenType) ToPointer() *TokenType {
	return &e
}
func (e *TokenType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2":
		fallthrough
	case "apikey":
		fallthrough
	case "basic":
		*e = TokenType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenType: %v", v)
	}
}

type Connection struct {
	// Unique identifier for the connection
	IDConnection string `json:"id_connection"`
	// Status of the connection
	Status string `json:"status"`
	// Slug for the provider
	ProviderSlug string `json:"provider_slug"`
	// Vertical category of the connection
	Vertical string `json:"vertical"`
	// URL of the account
	AccountURL string `json:"account_url"`
	// Strategy type
	TokenType TokenType `json:"token_type"`
	// Access token for the connection
	AccessToken string `json:"access_token"`
	// Refresh token for the connection
	RefreshToken string `json:"refresh_token"`
	// Expiration timestamp of the access token
	ExpirationTimestamp time.Time `json:"expiration_timestamp"`
	// Timestamp when the connection was created
	CreatedAt time.Time `json:"created_at"`
	// UUID Token for the connection
	ConnectionToken string `json:"connection_token"`
	// Project ID associated with the connection
	IDProject string `json:"id_project"`
	// Linked user ID associated with the connection
	IDLinkedUser string `json:"id_linked_user"`
}

func (c Connection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Connection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Connection) GetIDConnection() string {
	if o == nil {
		return ""
	}
	return o.IDConnection
}

func (o *Connection) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *Connection) GetProviderSlug() string {
	if o == nil {
		return ""
	}
	return o.ProviderSlug
}

func (o *Connection) GetVertical() string {
	if o == nil {
		return ""
	}
	return o.Vertical
}

func (o *Connection) GetAccountURL() string {
	if o == nil {
		return ""
	}
	return o.AccountURL
}

func (o *Connection) GetTokenType() TokenType {
	if o == nil {
		return TokenType("")
	}
	return o.TokenType
}

func (o *Connection) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *Connection) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *Connection) GetExpirationTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ExpirationTimestamp
}

func (o *Connection) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Connection) GetConnectionToken() string {
	if o == nil {
		return ""
	}
	return o.ConnectionToken
}

func (o *Connection) GetIDProject() string {
	if o == nil {
		return ""
	}
	return o.IDProject
}

func (o *Connection) GetIDLinkedUser() string {
	if o == nil {
		return ""
	}
	return o.IDLinkedUser
}
