// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Method string

const (
	MethodGet    Method = "GET"
	MethodPost   Method = "POST"
	MethodPatch  Method = "PATCH"
	MethodDelete Method = "DELETE"
	MethodPut    Method = "PUT"
)

func (e Method) ToPointer() *Method {
	return &e
}
func (e *Method) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "DELETE":
		fallthrough
	case "PUT":
		*e = Method(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Method: %v", v)
	}
}

type Data struct {
}

type Headers struct {
}

type PassThroughRequestDto struct {
	Method  Method   `json:"method"`
	Path    string   `json:"path"`
	Data    *Data    `json:"data,omitempty"`
	Headers *Headers `json:"headers,omitempty"`
}

func (o *PassThroughRequestDto) GetMethod() Method {
	if o == nil {
		return Method("")
	}
	return o.Method
}

func (o *PassThroughRequestDto) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *PassThroughRequestDto) GetData() *Data {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PassThroughRequestDto) GetHeaders() *Headers {
	if o == nil {
		return nil
	}
	return o.Headers
}
