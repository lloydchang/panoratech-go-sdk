// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/panoratech/go-sdk/internal/utils"
)

type PassThroughRequestDtoMethod string

const (
	PassThroughRequestDtoMethodGet    PassThroughRequestDtoMethod = "GET"
	PassThroughRequestDtoMethodPost   PassThroughRequestDtoMethod = "POST"
	PassThroughRequestDtoMethodPatch  PassThroughRequestDtoMethod = "PATCH"
	PassThroughRequestDtoMethodDelete PassThroughRequestDtoMethod = "DELETE"
	PassThroughRequestDtoMethodPut    PassThroughRequestDtoMethod = "PUT"
)

func (e PassThroughRequestDtoMethod) ToPointer() *PassThroughRequestDtoMethod {
	return &e
}
func (e *PassThroughRequestDtoMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "DELETE":
		fallthrough
	case "PUT":
		*e = PassThroughRequestDtoMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PassThroughRequestDtoMethod: %v", v)
	}
}

type DataUnionType string

const (
	DataUnionTypeMapOfAny        DataUnionType = "mapOfAny"
	DataUnionTypeArrayOfMapOfAny DataUnionType = "arrayOfMapOfAny"
)

type Data struct {
	MapOfAny        map[string]any
	ArrayOfMapOfAny []map[string]any

	Type DataUnionType
}

func CreateDataMapOfAny(mapOfAny map[string]any) Data {
	typ := DataUnionTypeMapOfAny

	return Data{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateDataArrayOfMapOfAny(arrayOfMapOfAny []map[string]any) Data {
	typ := DataUnionTypeArrayOfMapOfAny

	return Data{
		ArrayOfMapOfAny: arrayOfMapOfAny,
		Type:            typ,
	}
}

func (u *Data) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = DataUnionTypeMapOfAny
		return nil
	}

	var arrayOfMapOfAny []map[string]any = []map[string]any{}
	if err := utils.UnmarshalJSON(data, &arrayOfMapOfAny, "", true, true); err == nil {
		u.ArrayOfMapOfAny = arrayOfMapOfAny
		u.Type = DataUnionTypeArrayOfMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Data", string(data))
}

func (u Data) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfMapOfAny != nil {
		return utils.MarshalJSON(u.ArrayOfMapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type Data: all fields are null")
}

type PassThroughRequestDto struct {
	Method  PassThroughRequestDtoMethod `json:"method"`
	Path    *string                     `json:"path"`
	Data    *Data                       `json:"data"`
	Headers map[string]any              `json:"headers"`
}

func (o *PassThroughRequestDto) GetMethod() PassThroughRequestDtoMethod {
	if o == nil {
		return PassThroughRequestDtoMethod("")
	}
	return o.Method
}

func (o *PassThroughRequestDto) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *PassThroughRequestDto) GetData() *Data {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PassThroughRequestDto) GetHeaders() map[string]any {
	if o == nil {
		return nil
	}
	return o.Headers
}
