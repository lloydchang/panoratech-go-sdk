// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

// UnifiedCrmTaskOutputStatus - The status of the task. Authorized values are PENDING, COMPLETED.
type UnifiedCrmTaskOutputStatus string

const (
	UnifiedCrmTaskOutputStatusPending   UnifiedCrmTaskOutputStatus = "PENDING"
	UnifiedCrmTaskOutputStatusCompleted UnifiedCrmTaskOutputStatus = "COMPLETED"
)

func (e UnifiedCrmTaskOutputStatus) ToPointer() *UnifiedCrmTaskOutputStatus {
	return &e
}
func (e *UnifiedCrmTaskOutputStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "COMPLETED":
		*e = UnifiedCrmTaskOutputStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnifiedCrmTaskOutputStatus: %v", v)
	}
}

type UnifiedCrmTaskOutput struct {
	// The subject of the task
	Subject *string `json:"subject"`
	// The content of the task
	Content *string `json:"content"`
	// The status of the task. Authorized values are PENDING, COMPLETED.
	Status *UnifiedCrmTaskOutputStatus `json:"status"`
	// The due date of the task
	DueDate *string `json:"due_date,omitempty"`
	// The finished date of the task
	FinishedDate *string `json:"finished_date,omitempty"`
	// The UUID of the user tied to the task
	UserID *string `json:"user_id,omitempty"`
	// The UUID of the company tied to the task
	CompanyID *string `json:"company_id,omitempty"`
	// The UUID of the deal tied to the task
	DealID *string `json:"deal_id,omitempty"`
	// The custom field mappings of the task between the remote 3rd party & Panora
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	// The UUID of the task
	ID *string `json:"id,omitempty"`
	// The ID of the task in the context of the Crm 3rd Party
	RemoteID *string `json:"remote_id,omitempty"`
	// The remote data of the task in the context of the Crm 3rd Party
	RemoteData map[string]any `json:"remote_data,omitempty"`
	// The created date of the object
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The modified date of the object
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

func (u UnifiedCrmTaskOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UnifiedCrmTaskOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UnifiedCrmTaskOutput) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *UnifiedCrmTaskOutput) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *UnifiedCrmTaskOutput) GetStatus() *UnifiedCrmTaskOutputStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UnifiedCrmTaskOutput) GetDueDate() *string {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *UnifiedCrmTaskOutput) GetFinishedDate() *string {
	if o == nil {
		return nil
	}
	return o.FinishedDate
}

func (o *UnifiedCrmTaskOutput) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *UnifiedCrmTaskOutput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *UnifiedCrmTaskOutput) GetDealID() *string {
	if o == nil {
		return nil
	}
	return o.DealID
}

func (o *UnifiedCrmTaskOutput) GetFieldMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *UnifiedCrmTaskOutput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UnifiedCrmTaskOutput) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *UnifiedCrmTaskOutput) GetRemoteData() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *UnifiedCrmTaskOutput) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UnifiedCrmTaskOutput) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}
