// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

type WebhookResponse struct {
	// The unique UUID of the webhook.
	IDWebhookEndpoint string `json:"id_webhook_endpoint"`
	// The description of the webhook.
	EndpointDescription string `json:"endpoint_description"`
	// The endpoint url of the webhook.
	URL string `json:"url"`
	// The secret of the webhook.
	Secret string `json:"secret"`
	// The status of the webhook.
	Active bool `json:"active"`
	// The created date  of the webhook.
	CreatedAt time.Time `json:"created_at"`
	// The events that the webhook listen to.
	Scope []string `json:"scope"`
	// The project id tied to the webhook.
	IDProject string `json:"id_project"`
	// The last update date of the webhook.
	LastUpdate time.Time `json:"last_update"`
}

func (w WebhookResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WebhookResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WebhookResponse) GetIDWebhookEndpoint() string {
	if o == nil {
		return ""
	}
	return o.IDWebhookEndpoint
}

func (o *WebhookResponse) GetEndpointDescription() string {
	if o == nil {
		return ""
	}
	return o.EndpointDescription
}

func (o *WebhookResponse) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *WebhookResponse) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *WebhookResponse) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *WebhookResponse) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *WebhookResponse) GetScope() []string {
	if o == nil {
		return []string{}
	}
	return o.Scope
}

func (o *WebhookResponse) GetIDProject() string {
	if o == nil {
		return ""
	}
	return o.IDProject
}

func (o *WebhookResponse) GetLastUpdate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.LastUpdate
}
