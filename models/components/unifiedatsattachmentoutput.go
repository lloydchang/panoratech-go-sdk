// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/panoratech/go-sdk/internal/utils"
	"time"
)

// AttachmentType - The type of the file
type AttachmentType string

const (
	AttachmentTypeResume      AttachmentType = "RESUME"
	AttachmentTypeCoverLetter AttachmentType = "COVER_LETTER"
	AttachmentTypeOfferLetter AttachmentType = "OFFER_LETTER"
	AttachmentTypeOther       AttachmentType = "OTHER"
)

func (e AttachmentType) ToPointer() *AttachmentType {
	return &e
}
func (e *AttachmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESUME":
		fallthrough
	case "COVER_LETTER":
		fallthrough
	case "OFFER_LETTER":
		fallthrough
	case "OTHER":
		*e = AttachmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AttachmentType: %v", v)
	}
}

type UnifiedAtsAttachmentOutput struct {
	// The URL of the file
	FileURL *string `json:"file_url,omitempty"`
	// The name of the file
	FileName *string `json:"file_name,omitempty"`
	// The type of the file
	AttachmentType *AttachmentType `json:"attachment_type,omitempty"`
	// The remote creation date of the attachment
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// The remote modification date of the attachment
	RemoteModifiedAt *time.Time `json:"remote_modified_at,omitempty"`
	// The UUID of the candidate
	CandidateID *string `json:"candidate_id,omitempty"`
	// The custom field mappings of the object between the remote 3rd party & Panora
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	// The UUID of the attachment
	ID *string `json:"id,omitempty"`
	// The remote ID of the attachment
	RemoteID *string `json:"remote_id,omitempty"`
	// The remote data of the attachment in the context of the 3rd Party
	RemoteData map[string]any `json:"remote_data,omitempty"`
	// The created date of the object
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The modified date of the object
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

func (u UnifiedAtsAttachmentOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UnifiedAtsAttachmentOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UnifiedAtsAttachmentOutput) GetFileURL() *string {
	if o == nil {
		return nil
	}
	return o.FileURL
}

func (o *UnifiedAtsAttachmentOutput) GetFileName() *string {
	if o == nil {
		return nil
	}
	return o.FileName
}

func (o *UnifiedAtsAttachmentOutput) GetAttachmentType() *AttachmentType {
	if o == nil {
		return nil
	}
	return o.AttachmentType
}

func (o *UnifiedAtsAttachmentOutput) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *UnifiedAtsAttachmentOutput) GetRemoteModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteModifiedAt
}

func (o *UnifiedAtsAttachmentOutput) GetCandidateID() *string {
	if o == nil {
		return nil
	}
	return o.CandidateID
}

func (o *UnifiedAtsAttachmentOutput) GetFieldMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *UnifiedAtsAttachmentOutput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UnifiedAtsAttachmentOutput) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *UnifiedAtsAttachmentOutput) GetRemoteData() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *UnifiedAtsAttachmentOutput) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UnifiedAtsAttachmentOutput) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}
