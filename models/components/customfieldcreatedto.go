// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CustomFieldCreateDtoObjectTypeOwner string

const (
	CustomFieldCreateDtoObjectTypeOwnerCompany    CustomFieldCreateDtoObjectTypeOwner = "company"
	CustomFieldCreateDtoObjectTypeOwnerContact    CustomFieldCreateDtoObjectTypeOwner = "contact"
	CustomFieldCreateDtoObjectTypeOwnerDeal       CustomFieldCreateDtoObjectTypeOwner = "deal"
	CustomFieldCreateDtoObjectTypeOwnerLead       CustomFieldCreateDtoObjectTypeOwner = "lead"
	CustomFieldCreateDtoObjectTypeOwnerNote       CustomFieldCreateDtoObjectTypeOwner = "note"
	CustomFieldCreateDtoObjectTypeOwnerTask       CustomFieldCreateDtoObjectTypeOwner = "task"
	CustomFieldCreateDtoObjectTypeOwnerEngagement CustomFieldCreateDtoObjectTypeOwner = "engagement"
	CustomFieldCreateDtoObjectTypeOwnerStage      CustomFieldCreateDtoObjectTypeOwner = "stage"
	CustomFieldCreateDtoObjectTypeOwnerUser       CustomFieldCreateDtoObjectTypeOwner = "user"
)

func (e CustomFieldCreateDtoObjectTypeOwner) ToPointer() *CustomFieldCreateDtoObjectTypeOwner {
	return &e
}
func (e *CustomFieldCreateDtoObjectTypeOwner) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "company":
		fallthrough
	case "contact":
		fallthrough
	case "deal":
		fallthrough
	case "lead":
		fallthrough
	case "note":
		fallthrough
	case "task":
		fallthrough
	case "engagement":
		fallthrough
	case "stage":
		fallthrough
	case "user":
		*e = CustomFieldCreateDtoObjectTypeOwner(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomFieldCreateDtoObjectTypeOwner: %v", v)
	}
}

// CustomFieldCreateDtoDataType - The data type of the custom field
type CustomFieldCreateDtoDataType string

const (
	CustomFieldCreateDtoDataTypeString CustomFieldCreateDtoDataType = "string"
	CustomFieldCreateDtoDataTypeNumber CustomFieldCreateDtoDataType = "number"
)

func (e CustomFieldCreateDtoDataType) ToPointer() *CustomFieldCreateDtoDataType {
	return &e
}
func (e *CustomFieldCreateDtoDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		fallthrough
	case "number":
		*e = CustomFieldCreateDtoDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomFieldCreateDtoDataType: %v", v)
	}
}

type CustomFieldCreateDto struct {
	ObjectTypeOwner *CustomFieldCreateDtoObjectTypeOwner `json:"object_type_owner"`
	// The name of the custom field
	Name *string `json:"name"`
	// The description of the custom field
	Description *string `json:"description"`
	// The data type of the custom field
	DataType *CustomFieldCreateDtoDataType `json:"data_type"`
	// The source custom field ID
	SourceCustomFieldID *string `json:"source_custom_field_id"`
	// The name of the source software/provider
	SourceProvider *string `json:"source_provider"`
	// The linked user ID
	LinkedUserID *string `json:"linked_user_id"`
}

func (o *CustomFieldCreateDto) GetObjectTypeOwner() *CustomFieldCreateDtoObjectTypeOwner {
	if o == nil {
		return nil
	}
	return o.ObjectTypeOwner
}

func (o *CustomFieldCreateDto) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomFieldCreateDto) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CustomFieldCreateDto) GetDataType() *CustomFieldCreateDtoDataType {
	if o == nil {
		return nil
	}
	return o.DataType
}

func (o *CustomFieldCreateDto) GetSourceCustomFieldID() *string {
	if o == nil {
		return nil
	}
	return o.SourceCustomFieldID
}

func (o *CustomFieldCreateDto) GetSourceProvider() *string {
	if o == nil {
		return nil
	}
	return o.SourceProvider
}

func (o *CustomFieldCreateDto) GetLinkedUserID() *string {
	if o == nil {
		return nil
	}
	return o.LinkedUserID
}
